{"version":3,"sources":["../../dist/index.es.js","DatePicker/index.tsx","index.tsx","App.tsx"],"names":["DAYS_IN_A_WEEK","DAY","MONDAY","SUNDAY","DATE_GROUP","CURRENT_MONTH","NEXT_MONTH","PREVIOUS_MONTH","constants","dateFormatter","Intl","DateTimeFormat","month","weekday","year","useCalendar","_a","_b","weekStartsOn","_c","selectedDate","Date","_setSelectedDate","setSelectedDate","_d","firstDayOfTheWeek","_setFirstDayOfTheWeek","getFirstWeekdayOfMonth","date","firstDayOfWeekOfMonth","getFullYear","getMonth","getDay","getLastWeekdayOfMonth","lastDayOfWeekOfMonth","getLastDayOfMonth","getDate","getOuterFirstRow","outerFirstRow","previousMonth","lastWeekday","dayOfMonth","a","group","getFirstRow","innerFirstRow","firstWeekday","getInnerFirstRow","concat","getOuterLastRow","outerLastRow","getLastRow","getInnerLastRow","getWeekday","formatToParts","find","p","type","Error","value","replace","updateTimeToTheStartOfTheDay","daysOfTheWeek","days","firstDay","setDate","i","push","getRows","rows","_i","middleRows_1","middleRows","lastDay","numberOfRows","row","b","getMiddleRows","length","nudgeMonth","state","nudgeYear","setFirstDayOfTheWeek","day","DatePicker","onChange","className","toLocaleDateString","onClick","map","key","index","Fragment","cell","getTime","name","checked","event","target","ReactDOM","render","useState","toLocaleString","document","getElementById"],"mappings":"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","file":"static/js/main.bdb135e8.chunk.js","sourcesContent":["import { useState, useMemo } from 'react';\nvar DAYS_IN_A_WEEK = 7;\nvar DAY = {\n  MONDAY: 'monday',\n  SUNDAY: 'sunday'\n};\nvar DATE_GROUP = {\n  CURRENT_MONTH: 'current-month',\n  NEXT_MONTH: 'next-month',\n  PREVIOUS_MONTH: 'previous-month'\n};\nvar constants = {\n  DAYS_IN_A_WEEK: DAYS_IN_A_WEEK,\n  DAY: DAY,\n  DATE_GROUP: DATE_GROUP\n};\nvar dateFormatter = new Intl.DateTimeFormat('default', {\n  month: 'short',\n  weekday: 'short',\n  year: 'numeric'\n});\n\nfunction useCalendar(_a) {\n  var _b = _a.weekStartsOn,\n      weekStartsOn = _b === void 0 ? DAY.SUNDAY : _b,\n      _c = _a.selectedDate,\n      selectedDate = _c === void 0 ? new Date() : _c,\n      _setSelectedDate = _a.setSelectedDate;\n\n  var _d = useState(weekStartsOn),\n      firstDayOfTheWeek = _d[0],\n      _setFirstDayOfTheWeek = _d[1];\n\n  var daysOfTheWeek = useMemo(getDaysOfTheWeek, [firstDayOfTheWeek]);\n\n  function getLastDayOfTheWeek(forThePreviousMonth) {\n    if (forThePreviousMonth || firstDayOfTheWeek === DAY.MONDAY) {\n      return 6; //tslint:disable-line\n    }\n\n    return 0;\n  }\n\n  function getFirstDayOfTheWeek(forTheNextMonth) {\n    if (forTheNextMonth || firstDayOfTheWeek === DAY.MONDAY) {\n      return 0;\n    }\n\n    return 1;\n  }\n  /**\r\n   * @returns\r\n   * An integer, between 0 and 6, corresponding to the **first** day of the\r\n   * month for the given date, according to local time: 0 for Sunday, 1 for\r\n   * Monday, 2 for Tuesday, and so on.\r\n   */\n\n\n  function getFirstWeekdayOfMonth(date) {\n    var firstDayOfWeekOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      firstDayOfWeekOfMonth -= 1;\n    }\n\n    if (firstDayOfWeekOfMonth === -1) {\n      firstDayOfWeekOfMonth = 6; //tslint:disable-line\n    }\n\n    return firstDayOfWeekOfMonth;\n  }\n  /**\r\n   * @returns\r\n   * An integer, between 0 and 6, corresponding to the **last** day of the week\r\n   * for the month for the given date, according to local time: 0 for Sunday, 1\r\n   * for Monday, 2 for Tuesday, and so on.\r\n   */\n\n\n  function getLastWeekdayOfMonth(date) {\n    var lastDayOfWeekOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      lastDayOfWeekOfMonth -= 1;\n    }\n\n    if (lastDayOfWeekOfMonth === -1) {\n      lastDayOfWeekOfMonth = 6; //tslint:disable-line\n    }\n\n    return lastDayOfWeekOfMonth;\n  }\n  /**\r\n   * @returns\r\n   * An integer, between 28 and 31, representing the **last**\r\n   * day of the month for the given date according to local time.\r\n   */\n\n\n  function getLastDayOfMonth(date) {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  }\n\n  function getOuterFirstRow() {\n    var outerFirstRow = [];\n    var previousMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1, 1);\n    var lastWeekday = getLastWeekdayOfMonth(previousMonth);\n\n    if (lastWeekday === getLastDayOfTheWeek(true)) {\n      return outerFirstRow;\n    }\n\n    var dayOfMonth = getLastDayOfMonth(previousMonth);\n\n    for (var a = lastWeekday; a >= 0; a--, dayOfMonth--) {\n      outerFirstRow[a] = {\n        date: new Date(previousMonth.getFullYear(), previousMonth.getMonth(), dayOfMonth),\n        group: DATE_GROUP.PREVIOUS_MONTH\n      };\n    }\n\n    return outerFirstRow;\n  }\n\n  function getInnerFirstRow() {\n    var innerFirstRow = [];\n    var dayOfMonth = 1;\n    var firstWeekday = getFirstWeekdayOfMonth(selectedDate);\n\n    for (var a = 0; firstWeekday < DAYS_IN_A_WEEK; a++, firstWeekday++, dayOfMonth++ // tslint:disable-line\n    ) {\n      innerFirstRow[a] = {\n        date: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), dayOfMonth),\n        group: DATE_GROUP.CURRENT_MONTH\n      };\n    }\n\n    return innerFirstRow;\n  }\n\n  function getFirstRow() {\n    var outerFirstRow = getOuterFirstRow();\n    var innerFirstRow = getInnerFirstRow();\n    var firstRow = outerFirstRow.concat(innerFirstRow);\n    return firstRow;\n  }\n\n  function getMiddleRows() {\n    var middleRows = [];\n    var firstWeekday = getFirstWeekdayOfMonth(selectedDate);\n    var lastDay = getLastDayOfMonth(selectedDate);\n    var lastWeekday = getLastWeekdayOfMonth(selectedDate);\n    var numberOfRows = (lastDay - (DAYS_IN_A_WEEK - firstWeekday) - (lastWeekday + 1)) / DAYS_IN_A_WEEK;\n    var dayOfMonth = DAYS_IN_A_WEEK - firstWeekday + 1;\n\n    for (var a = 0; a < numberOfRows; a++) {\n      var row = [];\n\n      for (var b = 0; b < DAYS_IN_A_WEEK; b++, dayOfMonth++) {\n        row.push({\n          date: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), dayOfMonth),\n          group: DATE_GROUP.CURRENT_MONTH\n        });\n      }\n\n      middleRows.push(row);\n    }\n\n    return middleRows;\n  }\n\n  function getInnerLastRow() {\n    var innerFirstRow = [];\n    var lastWeekday = getLastWeekdayOfMonth(selectedDate);\n    var dayOfMonth = getLastDayOfMonth(selectedDate);\n\n    for (var a = lastWeekday; a >= 0; a--, dayOfMonth--) {\n      innerFirstRow[a] = {\n        date: new Date(selectedDate.getFullYear(), selectedDate.getMonth(), dayOfMonth),\n        group: DATE_GROUP.CURRENT_MONTH\n      };\n    }\n\n    return innerFirstRow;\n  }\n\n  function getOuterLastRow() {\n    var outerLastRow = [];\n    var firstWeekday = getFirstWeekdayOfMonth(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1));\n\n    if (firstWeekday === getFirstDayOfTheWeek(true)) {\n      return outerLastRow;\n    }\n\n    var dayOfMonth = 1;\n\n    for (var a = 0; firstWeekday < DAYS_IN_A_WEEK; a++, firstWeekday++, dayOfMonth++ // tslint:disable-line\n    ) {\n      outerLastRow[a] = {\n        date: new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, dayOfMonth),\n        group: DATE_GROUP.NEXT_MONTH\n      };\n    }\n\n    return outerLastRow;\n  }\n\n  function getLastRow() {\n    var outerLastRow = getOuterLastRow();\n    var innerLastRow = getInnerLastRow();\n    var lastRow = innerLastRow.concat(outerLastRow);\n    return lastRow;\n  }\n  /**\r\n   * @typedef DateCell\r\n   * @property {Date} date\r\n   * @property {String} group\r\n   *\r\n   * @returns {DateCell[][]} rows where each row is an array of DateCells\r\n   */\n\n\n  function getRows() {\n    var rows = [];\n    rows.push(getFirstRow());\n    var middleRows = getMiddleRows();\n\n    for (var _i = 0, middleRows_1 = middleRows; _i < middleRows_1.length; _i++) {\n      var row = middleRows_1[_i];\n      rows.push(row);\n    }\n\n    rows.push(getLastRow());\n    return rows;\n  }\n\n  function getWeekday(date) {\n    var weekday = dateFormatter.formatToParts(new Date(date)).find(function (p) {\n      return p.type === 'weekday';\n    });\n\n    if (!weekday) {\n      throw new Error();\n    }\n\n    return weekday.value.replace('.', '');\n  }\n\n  function getDaysOfTheWeek() {\n    var date = new Date();\n    var days = [];\n    var firstDay = date.getDate() - date.getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      firstDay += 1;\n    }\n\n    date.setDate(firstDay);\n\n    for (var i = 0; i < DAYS_IN_A_WEEK; i++) {\n      var weekday = getWeekday(date);\n      days.push(weekday);\n      date.setDate(date.getDate() + 1);\n    }\n\n    return days;\n  }\n\n  function updateTimeToTheStartOfTheDay(date) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);\n  } // function updateTimeToTheEndOfTheDay(date: Date) {\n  //   return new Date(\n  //     date.getFullYear(),\n  //     date.getMonth(),\n  //     date.getDate(),\n  //     23,\n  //     59,\n  //     59,\n  //     999\n  //   )\n  // }\n\n\n  function nudgeYear(value) {\n    _setSelectedDate(function (state) {\n      return new Date(state.getFullYear() + value, state.getMonth(), // TODO set to last day instead of 28th for all months\n      state.getDate() > 28 ? 28 : state.getDate() // tslint:disable-line\n      );\n    });\n  }\n\n  function nudgeMonth(value) {\n    _setSelectedDate(function (state) {\n      return new Date(state.getFullYear(), state.getMonth() + value, // TODO set to last day instead of 28th for all months\n      state.getDate() > 28 ? 28 : state.getDate() // tslint:disable-line\n      );\n    });\n  }\n\n  return {\n    daysOfTheWeek: daysOfTheWeek,\n    firstDayOfTheWeek: firstDayOfTheWeek,\n    getRows: getRows,\n    nudgeMonth: nudgeMonth,\n    nudgeYear: nudgeYear,\n    selectedDate: selectedDate,\n    setFirstDayOfTheWeek: function setFirstDayOfTheWeek(day) {\n      return _setFirstDayOfTheWeek(day);\n    },\n    setSelectedDate: function setSelectedDate(date) {\n      return _setSelectedDate(updateTimeToTheStartOfTheDay(date));\n    },\n    updateTimeToTheStartOfTheDay: updateTimeToTheStartOfTheDay\n  };\n}\n\nexport { constants, useCalendar };","import React, { ChangeEvent } from 'react'\nimport { Cell, constants, useCalendar } from 'react-datetime-hooks'\nimport './styles.scss'\n\ninterface DatePickerProps {\n  value: Date,\n  onChange: React.Dispatch<React.SetStateAction<Date>>\n}\n\nexport const DatePicker: React.FC<DatePickerProps> = ({ value, onChange }) => {\n  const {\n    firstDayOfTheWeek,\n    setFirstDayOfTheWeek,\n    daysOfTheWeek,\n    getRows,\n    selectedDate,\n    setSelectedDate,\n    nudgeYear,\n    nudgeMonth,\n    updateTimeToTheStartOfTheDay\n  } = useCalendar({\n    weekStartsOn: constants.DAY.MONDAY,\n    selectedDate: value,\n    setSelectedDate: onChange\n  })\n\n  function getTitle() {\n    return selectedDate.toLocaleDateString('default', {\n      month: 'long',\n      year: 'numeric'\n    })\n  }\n\n  function decreaseYear() {\n    nudgeYear(-1)\n  }\n\n  function decreaseMonth() {\n    nudgeMonth(-1)\n  }\n\n  function setSelectedDateToToday() {\n    setSelectedDate(updateTimeToTheStartOfTheDay(new Date()))\n    onChange(updateTimeToTheStartOfTheDay(new Date()))\n  }\n\n  function increaseMonth() {\n    nudgeMonth(1)\n  }\n\n  function increaseYear() {\n    nudgeYear(1)\n  }\n\n  function setSelectedDateToCell(date: Date) {\n    return () => {\n      setSelectedDate(date)\n      onChange(date)\n    }\n  }\n\n  function setWeekStartDate(event: ChangeEvent<HTMLInputElement>) {\n    setFirstDayOfTheWeek(\n      event.target.checked ? constants.DAY.MONDAY : constants.DAY.SUNDAY\n    )\n  }\n\n  function renderDaysOfTheWeek() {\n    return daysOfTheWeek.map((day: string) => (\n      <li key={day} className=\"date-picker__day-of-the-week\">\n        {day}\n      </li>\n    ))\n  }\n\n  function renderDateGrid() {\n    return getRows().map((row: Cell[], index: number) => (\n      <React.Fragment key={index}>\n        {row.map((cell: Cell) => (\n          <li\n            key={cell.date.getTime()}\n            className={`date-picker__date date-picker__date--${\n              cell.group\n              }${\n              cell.date.getTime() === selectedDate.getTime()\n                ? ' date-picker__date--selected'\n                : ''\n              }`}\n            onClick={setSelectedDateToCell(cell.date)}\n          >\n            {cell.date.getDate()}\n          </li>\n        ))}\n      </React.Fragment>\n    ))\n  }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <h1>\n          {getTitle()}\n        </h1>\n        <div className=\"button-group\">\n          <button className=\"button\" type=\"button\" onClick={decreaseYear}>\n            &lt;&lt;\n          </button>\n          <button className=\"button\" type=\"button\" onClick={decreaseMonth}>\n            &lt;\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={setSelectedDateToToday}\n          >\n            Today\n          </button>\n          <button className=\"button\" type=\"button\" onClick={increaseMonth}>\n            &gt;\n          </button>\n          <button className=\"button\" type=\"button\" onClick={increaseYear}>\n            &gt;&gt;\n          </button>\n        </div>\n        <ul className=\"date-picker__grid\">\n          {renderDaysOfTheWeek()}\n          {renderDateGrid()}\n        </ul>\n      </div>\n      <br />\n      <br />\n      <input\n        name=\"weekStartsOnMonday\"\n        type=\"checkbox\"\n        checked={firstDayOfTheWeek === constants.DAY.MONDAY}\n        onChange={setWeekStartDate}\n      />\n      <label>Week starts on Monday</label>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useState } from 'react'\nimport { DatePicker } from './DatePicker'\nimport './styles.scss'\n\nexport const App: React.FC = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date())\n\n  return (\n    <div className=\"container\">\n      <DatePicker value={selectedDate} onChange={setSelectedDate} />\n      <p>Selected date: {selectedDate.toLocaleString()}</p>\n      <button onClick={() => setSelectedDate(new Date(2000, 0, 1))}>Set to 2000-01-01</button>\n    </div>\n  )\n}\n"],"sourceRoot":""}