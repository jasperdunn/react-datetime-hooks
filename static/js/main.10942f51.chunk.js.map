{"version":3,"sources":["../../src/constants.ts","../../src/formatter.ts","../../src/useCalendar.ts","DatePicker/index.tsx","App.tsx","index.tsx"],"names":["DAY","MONDAY","SUNDAY","DATE_GROUP","CURRENT_MONTH","NEXT_MONTH","PREVIOUS_MONTH","constants","dateFormatter","Intl","DateTimeFormat","month","weekday","year","useCalendar","weekStartsOn","selectedDate","Date","firstDayOfTheWeek","getFirstWeekdayOfMonth","date","firstDayOfWeekOfMonth","getFullYear","getMonth","getDay","getLastWeekdayOfMonth","lastDayOfWeekOfMonth","getLastDayOfMonth","getDate","getOuterFirstRow","outerFirstRow","previousMonth","lastWeekday","dayOfMonth","a","group","getFirstRow","innerFirstRow","firstWeekday","getInnerFirstRow","concat","getOuterLastRow","outerLastRow","getLastRow","getInnerLastRow","getWeekday","formatToParts","find","p","type","Error","value","replace","updateTimeToTheStartOfTheDay","daysOfTheWeek","days","firstDay","setDate","i","push","getRows","rows","middleRows","numberOfRows","row","b","getMiddleRows","nudgeMonth","state","nudgeYear","setFirstDayOfTheWeek","day","setSelectedDate","DatePicker","onChange","className","toLocaleDateString","onClick","map","index","cell","getTime","name","checked","event","target","App","useState","toLocaleString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10942f51.chunk.js","sourcesContent":["export const DAYS_IN_A_WEEK = 7;\n\nexport const DAY = { MONDAY: \"monday\", SUNDAY: \"sunday\" };\n\nexport const DATE_GROUP = {\n  CURRENT_MONTH: \"current-month\",\n  NEXT_MONTH: \"next-month\",\n  PREVIOUS_MONTH: \"previous-month\",\n};\n\nexport const constants = {\n  DAYS_IN_A_WEEK,\n  DAY,\n  DATE_GROUP,\n};\n","export const dateFormatter = new Intl.DateTimeFormat(\"default\", {\n  month: \"short\",\n  weekday: \"short\",\n  year: \"numeric\",\n});\n","import { useMemo, useState } from \"react\";\nimport { DATE_GROUP, DAY, DAYS_IN_A_WEEK } from \"./constants\";\nimport { dateFormatter } from \"./formatter\";\nimport { CalendarExports, CalendarOptions, Cell } from \"./types\";\n\nexport function useCalendar({\n  weekStartsOn = DAY.SUNDAY,\n  selectedDate = new Date(),\n  setSelectedDate,\n}: CalendarOptions): CalendarExports {\n  const [firstDayOfTheWeek, setFirstDayOfTheWeek] = useState(weekStartsOn);\n  const daysOfTheWeek = useMemo(getDaysOfTheWeek, [firstDayOfTheWeek]);\n\n  function getLastDayOfTheWeek(forThePreviousMonth: boolean) {\n    if (forThePreviousMonth || firstDayOfTheWeek === DAY.MONDAY) {\n      return 6; //tslint:disable-line\n    }\n    return 0;\n  }\n\n  function getFirstDayOfTheWeek(forTheNextMonth: boolean) {\n    if (forTheNextMonth || firstDayOfTheWeek === DAY.MONDAY) {\n      return 0;\n    }\n    return 1;\n  }\n\n  /**\n   * @returns\n   * An integer, between 0 and 6, corresponding to the **first** day of the\n   * month for the given date, according to local time: 0 for Sunday, 1 for\n   * Monday, 2 for Tuesday, and so on.\n   */\n  function getFirstWeekdayOfMonth(date: Date) {\n    let firstDayOfWeekOfMonth = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      1\n    ).getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      firstDayOfWeekOfMonth -= 1;\n    }\n\n    if (firstDayOfWeekOfMonth === -1) {\n      firstDayOfWeekOfMonth = 6; //tslint:disable-line\n    }\n\n    return firstDayOfWeekOfMonth;\n  }\n\n  /**\n   * @returns\n   * An integer, between 0 and 6, corresponding to the **last** day of the week\n   * for the month for the given date, according to local time: 0 for Sunday, 1\n   * for Monday, 2 for Tuesday, and so on.\n   */\n  function getLastWeekdayOfMonth(date: Date) {\n    let lastDayOfWeekOfMonth = new Date(\n      date.getFullYear(),\n      date.getMonth() + 1,\n      0\n    ).getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      lastDayOfWeekOfMonth -= 1;\n    }\n\n    if (lastDayOfWeekOfMonth === -1) {\n      lastDayOfWeekOfMonth = 6; //tslint:disable-line\n    }\n\n    return lastDayOfWeekOfMonth;\n  }\n\n  /**\n   * @returns\n   * An integer, between 28 and 31, representing the **last**\n   * day of the month for the given date according to local time.\n   */\n  function getLastDayOfMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  }\n\n  function getOuterFirstRow(): Cell[] {\n    const outerFirstRow: Cell[] = [];\n\n    const previousMonth = new Date(\n      selectedDate.getFullYear(),\n      selectedDate.getMonth() - 1,\n      1\n    );\n\n    const lastWeekday = getLastWeekdayOfMonth(previousMonth);\n\n    if (lastWeekday === getLastDayOfTheWeek(true)) {\n      return outerFirstRow;\n    }\n\n    let dayOfMonth = getLastDayOfMonth(previousMonth);\n\n    for (let a = lastWeekday; a >= 0; a--, dayOfMonth--) {\n      outerFirstRow[a] = {\n        date: new Date(\n          previousMonth.getFullYear(),\n          previousMonth.getMonth(),\n          dayOfMonth\n        ),\n        group: DATE_GROUP.PREVIOUS_MONTH,\n      };\n    }\n\n    return outerFirstRow;\n  }\n\n  function getInnerFirstRow() {\n    const innerFirstRow = [];\n\n    let dayOfMonth = 1;\n    let firstWeekday = getFirstWeekdayOfMonth(selectedDate);\n\n    for (\n      let a = 0;\n      firstWeekday < DAYS_IN_A_WEEK;\n      a++, firstWeekday++, dayOfMonth++ // tslint:disable-line\n    ) {\n      innerFirstRow[a] = {\n        date: new Date(\n          selectedDate.getFullYear(),\n          selectedDate.getMonth(),\n          dayOfMonth\n        ),\n        group: DATE_GROUP.CURRENT_MONTH,\n      };\n    }\n\n    return innerFirstRow;\n  }\n\n  function getFirstRow() {\n    const outerFirstRow = getOuterFirstRow();\n    const innerFirstRow = getInnerFirstRow();\n\n    const firstRow = outerFirstRow.concat(innerFirstRow);\n\n    return firstRow;\n  }\n\n  function getMiddleRows() {\n    const middleRows = [];\n\n    const firstWeekday = getFirstWeekdayOfMonth(selectedDate);\n\n    const lastDay = getLastDayOfMonth(selectedDate);\n    const lastWeekday = getLastWeekdayOfMonth(selectedDate);\n\n    const numberOfRows =\n      (lastDay - (DAYS_IN_A_WEEK - firstWeekday) - (lastWeekday + 1)) /\n      DAYS_IN_A_WEEK;\n\n    let dayOfMonth = DAYS_IN_A_WEEK - firstWeekday + 1;\n\n    for (let a = 0; a < numberOfRows; a++) {\n      const row = [];\n\n      for (let b = 0; b < DAYS_IN_A_WEEK; b++, dayOfMonth++) {\n        row.push({\n          date: new Date(\n            selectedDate.getFullYear(),\n            selectedDate.getMonth(),\n            dayOfMonth\n          ),\n          group: DATE_GROUP.CURRENT_MONTH,\n        });\n      }\n\n      middleRows.push(row);\n    }\n\n    return middleRows;\n  }\n\n  function getInnerLastRow() {\n    const innerFirstRow = [];\n\n    const lastWeekday = getLastWeekdayOfMonth(selectedDate);\n    let dayOfMonth = getLastDayOfMonth(selectedDate);\n\n    for (let a = lastWeekday; a >= 0; a--, dayOfMonth--) {\n      innerFirstRow[a] = {\n        date: new Date(\n          selectedDate.getFullYear(),\n          selectedDate.getMonth(),\n          dayOfMonth\n        ),\n        group: DATE_GROUP.CURRENT_MONTH,\n      };\n    }\n\n    return innerFirstRow;\n  }\n\n  function getOuterLastRow(): Cell[] {\n    const outerLastRow: Cell[] = [];\n\n    let firstWeekday = getFirstWeekdayOfMonth(\n      new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1)\n    );\n\n    if (firstWeekday === getFirstDayOfTheWeek(true)) {\n      return outerLastRow;\n    }\n\n    let dayOfMonth = 1;\n\n    for (\n      let a = 0;\n      firstWeekday < DAYS_IN_A_WEEK;\n      a++, firstWeekday++, dayOfMonth++ // tslint:disable-line\n    ) {\n      outerLastRow[a] = {\n        date: new Date(\n          selectedDate.getFullYear(),\n          selectedDate.getMonth() + 1,\n          dayOfMonth\n        ),\n        group: DATE_GROUP.NEXT_MONTH,\n      };\n    }\n\n    return outerLastRow;\n  }\n\n  function getLastRow() {\n    const outerLastRow = getOuterLastRow();\n    const innerLastRow = getInnerLastRow();\n\n    const lastRow = innerLastRow.concat(outerLastRow);\n\n    return lastRow;\n  }\n\n  /**\n   * @typedef DateCell\n   * @property {Date} date\n   * @property {String} group\n   *\n   * @returns {DateCell[][]} rows where each row is an array of DateCells\n   */\n  function getRows() {\n    const rows = [];\n    rows.push(getFirstRow());\n\n    const middleRows = getMiddleRows();\n    for (const row of middleRows) {\n      rows.push(row);\n    }\n\n    rows.push(getLastRow());\n    return rows;\n  }\n\n  function getWeekday(date: Date) {\n    const weekday = dateFormatter\n      .formatToParts(new Date(date))\n      .find((p) => p.type === \"weekday\");\n\n    if (!weekday) {\n      throw new Error();\n    }\n\n    return weekday.value.replace(\".\", \"\");\n  }\n\n  function getDaysOfTheWeek() {\n    const date = new Date();\n    const days = [];\n\n    let firstDay = date.getDate() - date.getDay();\n\n    if (firstDayOfTheWeek === DAY.MONDAY) {\n      firstDay += 1;\n    }\n\n    date.setDate(firstDay);\n    for (let i = 0; i < DAYS_IN_A_WEEK; i++) {\n      const weekday = getWeekday(date);\n\n      days.push(weekday);\n      date.setDate(date.getDate() + 1);\n    }\n\n    return days;\n  }\n\n  function updateTimeToTheStartOfTheDay(date: Date) {\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  // function updateTimeToTheEndOfTheDay(date: Date) {\n  //   return new Date(\n  //     date.getFullYear(),\n  //     date.getMonth(),\n  //     date.getDate(),\n  //     23,\n  //     59,\n  //     59,\n  //     999\n  //   )\n  // }\n\n  function nudgeYear(value: number) {\n    setSelectedDate(\n      (state: Date) =>\n        new Date(\n          state.getFullYear() + value,\n          state.getMonth(),\n          // TODO set to last day instead of 28th for all months\n          state.getDate() > 28 ? 28 : state.getDate() // tslint:disable-line\n        )\n    );\n  }\n\n  function nudgeMonth(value: number) {\n    setSelectedDate(\n      (state) =>\n        new Date(\n          state.getFullYear(),\n          state.getMonth() + value,\n          // TODO set to last day instead of 28th for all months\n          state.getDate() > 28 ? 28 : state.getDate() // tslint:disable-line\n        )\n    );\n  }\n\n  return {\n    daysOfTheWeek,\n    firstDayOfTheWeek,\n    getRows,\n    nudgeMonth,\n    nudgeYear,\n    selectedDate,\n    setFirstDayOfTheWeek: (day: string) => setFirstDayOfTheWeek(day),\n    setSelectedDate: (date: Date) =>\n      setSelectedDate(updateTimeToTheStartOfTheDay(date)),\n    updateTimeToTheStartOfTheDay,\n  };\n}\n","import { ChangeEvent, Dispatch, Fragment, SetStateAction } from 'react';\nimport { Cell, constants, useCalendar } from '@jasperdunn/react-datetime-hooks';\nimport './styles.scss';\n\ntype DatePickerProps = {\n  value: Date;\n  onChange: Dispatch<SetStateAction<Date>>;\n};\nexport function DatePicker({ value, onChange }: DatePickerProps): JSX.Element {\n  const {\n    firstDayOfTheWeek,\n    setFirstDayOfTheWeek,\n    daysOfTheWeek,\n    getRows,\n    selectedDate,\n    setSelectedDate,\n    nudgeYear,\n    nudgeMonth,\n    updateTimeToTheStartOfTheDay,\n  } = useCalendar({\n    weekStartsOn: constants.DAY.MONDAY,\n    selectedDate: value,\n    setSelectedDate: onChange,\n  });\n\n  function getTitle(): string {\n    return selectedDate.toLocaleDateString('default', {\n      month: 'long',\n      year: 'numeric',\n    });\n  }\n\n  function decreaseYear(): void {\n    nudgeYear(-1);\n  }\n\n  function decreaseMonth(): void {\n    nudgeMonth(-1);\n  }\n\n  function setSelectedDateToToday(): void {\n    setSelectedDate(updateTimeToTheStartOfTheDay(new Date()));\n    onChange(updateTimeToTheStartOfTheDay(new Date()));\n  }\n\n  function increaseMonth(): void {\n    nudgeMonth(1);\n  }\n\n  function increaseYear(): void {\n    nudgeYear(1);\n  }\n\n  function setSelectedDateToCell(date: Date) {\n    return () => {\n      setSelectedDate(date);\n      onChange(date);\n    };\n  }\n\n  function setWeekStartDate(event: ChangeEvent<HTMLInputElement>): void {\n    setFirstDayOfTheWeek(\n      event.target.checked ? constants.DAY.MONDAY : constants.DAY.SUNDAY\n    );\n  }\n\n  function renderDaysOfTheWeek(): JSX.Element[] {\n    return daysOfTheWeek.map((day: string) => (\n      <li key={day} className=\"date-picker__day-of-the-week\">\n        {day}\n      </li>\n    ));\n  }\n\n  function renderDateGrid(): JSX.Element[] {\n    return getRows().map((row: Cell[], index: number) => (\n      <Fragment key={index}>\n        {row.map((cell: Cell) => (\n          <li\n            key={cell.date.getTime()}\n            className={`date-picker__date date-picker__date--${cell.group}${\n              cell.date.getTime() === selectedDate.getTime()\n                ? ' date-picker__date--selected'\n                : ''\n            }`}\n            onClick={setSelectedDateToCell(cell.date)}\n          >\n            {cell.date.getDate()}\n          </li>\n        ))}\n      </Fragment>\n    ));\n  }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <h1>{getTitle()}</h1>\n        <div className=\"button-group\">\n          <button className=\"button\" type=\"button\" onClick={decreaseYear}>\n            &lt;&lt;\n          </button>\n          <button className=\"button\" type=\"button\" onClick={decreaseMonth}>\n            &lt;\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={setSelectedDateToToday}\n          >\n            Today\n          </button>\n          <button className=\"button\" type=\"button\" onClick={increaseMonth}>\n            &gt;\n          </button>\n          <button className=\"button\" type=\"button\" onClick={increaseYear}>\n            &gt;&gt;\n          </button>\n        </div>\n        <ul className=\"date-picker__grid\">\n          {renderDaysOfTheWeek()}\n          {renderDateGrid()}\n        </ul>\n      </div>\n      <br />\n      <br />\n      <input\n        name=\"weekStartsOnMonday\"\n        type=\"checkbox\"\n        checked={firstDayOfTheWeek === constants.DAY.MONDAY}\n        onChange={setWeekStartDate}\n      />\n      <label>Week starts on Monday</label>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { DatePicker } from './DatePicker';\nimport './styles.scss';\n\nexport const App: React.FC = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  return (\n    <div className=\"container\">\n      <DatePicker value={selectedDate} onChange={setSelectedDate} />\n      <p>Selected date: {selectedDate.toLocaleString()}</p>\n      <button onClick={() => setSelectedDate(new Date(2000, 0, 1))}>\n        Set to 2000-01-01\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}